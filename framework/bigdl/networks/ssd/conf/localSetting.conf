## Local Settings for this network

#############################################################################
## User Configurable Settings
#############################################################################

## Spark Master, for standalone mode
SPARK_MASTER="spark://bb-node1:7077"
HDFS_NAMENODE="hdfs://bb-node1:8020"

## number of cores
EXECUTOR_CORES=5

## number of executors
NUM_EXECUTORS=10

## memory for driver
DRIVER_MEMORY=30G

## memory for executors
EXECUTOR_MEMORY=200G

## Base Model Name of SSD, currently it only can be vgg16 or alexnet.
BASE_MODEL="vgg16"

## Data Set to use, currently it only can be COCO or VOC0712.
DATA_SET="VOC0712"

## Whether to  enable quantization? It only can be true or false.
IS_QUANT_ENABLE="true"

## Image Resolution, currently it only can be 300 or 512.
IMAGE_RESOLUTION="300"

## Local image folder or hdfs sequence folder, can only be local or seq.
FOLDER_TYPE="seq"

## Whether to visualize the dections. Can be true or false, default is false.
IS_VISUALIZED="false"

## The image data/sequence files is on HDFS or local disks, Can be true or false, true is for HDFS, default is true.
IS_HDFS="true" 


## Load BigDL pre-trained model or Caffe pre-trained Model, if MODEL is not set it will use Caffe model, or please assign MODEL to "the path to BigDL pre-trained Model". Default will use Caffe Model.
#MODEL="/path/to/bigdl/pre-trained/model" 

## Dir to store the temp data
TEMP_DATA_DIR="/mnt/disk1/SSD_Predict"
TEMP_OUTPUT_DIR="${TEMP_DATA_DIR}/output"

SSD_JARS_NAME="object-detection-0.1-SNAPSHOT-jar-with-dependencies-and-spark.jar"
#SSD_JARS_NAME="object-detection-0.1-SNAPSHOT-jar-with-dependencies.jar"
#SSD_JARS_NAME="pipeline-0.1-SNAPSHOT-jar-with-dependencies.jar"
SSD_JARS_PATH="${TEMP_DATA_DIR}/models/ssd/jars/${SSD_JARS_NAME}"
SSD_MODEL_HOME="${TEMP_DATA_DIR}/models/ssd"
PASCAL_DATA_DIR="${TEMP_DATA_DIR}/data/PASCAL"
COCO_DATA_DIR="${TEMP_DATA_DIR}/data/COCO"
HDFS_PASCAL_DIR="${HDFS_NAMENODE}/dlbenchmark/data/PASCAL"
HDFS_COCO_DIR="${HDFS_NAMENODE}/dlbenchmark/data/COCO"

TOTAL_CORES=$((${EXECUTOR_CORES} * ${NUM_EXECUTORS}))

NUM_PARTITION=${TOTAL_CORES}

BATCHSIZE=$((${TOTAL_CORES} * 4))

